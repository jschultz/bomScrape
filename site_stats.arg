#############################################################
# csvFilter
#     --header "Standard deviation"
#     --prelude "import math"
#               "variance = { (row['Month'], row['Day']): row['Variance'] for row in csv.DictReader(filter(lambda line: line[0]!='#', open('${site}_variance.csv'))) }"
#     --datecol "date"
#     --copy
#     --data "round(math.sqrt(float(variance[(Month,Day)])),3)"
#     --column "text"
#>    --outfile "${site}_stats.csv"
#<    "${site}_average.csv"
##########################################################
# csvCollect
#     --header "Month"
#              "Day"
#     --indexes "[Month]"
#               "[Day]"
#     --score "(Decimal(Smoothed_rainfall) - average[(Month,Day)])**2 / count[(Month,Day)]"
#     --datecol "date"
#     --sort "(int(Month),int(Day))"
#     --prelude "average = {}"
#               "count = {}"
#               "for row in csv.DictReader(filter(lambda line: line[0]!='#', open('${site}_average.csv'))):"
#               "    average[(row['Month'], row['Day'])] = Decimal(row['Average rainfall'])"
#               "    count[(row['Month'], row['Day'])] = int(row['Count'])"
#     --score-header "Variance"
#>    --outfile "${site}_variance.csv"
#<    "${site}_smoothed.csv"
#############################################################
# csvFilter
#     --header "Year"
#              "Month"
#              "Day"
#              "Daily rainfall"
#              "Smoothed rainfall"
#              "Average rainfall"
#              "Delta"
#     --prelude "average = { (row['Month'], row['Day']): row['Average rainfall'] for row in csv.DictReader(filter(lambda line: line[0]!='#', open('${site}_average.csv'))) }"
#     --datecol "date"
#     --data "(Year, Month, Day, Daily_rainfall, Smoothed_rainfall, Decimal(average[(Month,Day)]), Decimal(Smoothed_rainfall) - Decimal(average[(Month,Day)]))"
#     --column "text"
#>    --outfile "${site}_delta.csv"
#<    "${site}_smoothed.csv"
###########################################################
# csvFilter
#     --header "Month"
#              "Day"
#              "Total"
#              "Count"
#              "Average rainfall"
#     --datecol "date"
#     --data "[Month]"
#            "[Day]"
#            "[Total]"
#            "[Count]"
#            "[round(Decimal(Total)/int(Count),2)]"
#     --column "text"
#>    --outfile "${site}_average.csv"
################################################################################
# csvCollect
#     --header "Month"
#              "Day"
#     --indexes "[Month]"
#               "[Day]"
#     --score "Decimal(Smoothed_rainfall)"
#             "1"
#     --datecol "date"
#     --sort "(int(Month),int(Day))"
#     --score-header "Total"
#                    "Count"
#     --
#<    "${site}_smoothed.csv"
##########################################################
# csvFilter
#     --jobs "1"
#     --header "Year"
#              "Month"
#              "Day"
#              "Daily rainfall"
#              "Smoothed rainfall"
#     --prelude "window = ({},) * 13"
#               "if (args.jobs > 1):"
#               "    raise RuntimeError('This script can only be run with a single job (--jobs 1).')"
#               "def smooth(Date,Period,Rainfall):"
#               "    global window"
#               "    result = []"
#               "    for day in range(Period):"
#               "        window=window[1:13]+({'Date': (Date + datetime.timedelta(days=-day)).date(), 'Daily': round(Rainfall/Period,2)},)"
#               "        dayresult = [{'Year': window[6]['Date'].year, 'Month': window[6]['Date'].month, 'Day': window[6]['Date'].day, 'Daily rainfall':window[6]['Daily'], 'Smoothed rainfall': round(sum(tuple(item['Daily'] for item in window))/13,2)}] if window[0] else None"
#               "        if dayresult:"
#               "            result += dayresult"
#               "    return result"
#     --datecol "date"
#     --data "smooth(dateparser.parse(Date), int(Period or 1), Decimal(Rainfall))"
#     --column "text"
#>    --outfile "${site}_smoothed.csv"
#<    "${site}.csv"
###################################################################
# csvFilter
#     --pipe "sqlite3 -header -csv WA_sites.sqlite "SELECT Date, RainFall, Period from Rainfall, Site WHERE Site.Site = Rainfall.Site AND Name = \"${site}\" ORDER BY Date DESC""
#     --datecol "date"
#     --copy
#     --column "text"
#>    --outfile "${site}.csv"
################################################################################